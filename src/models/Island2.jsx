/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Sergi Tarres Puertas (https://sketchfab.com/starres)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/island-lowpoly-1eae12888f514a5ebbb322edcae835e6
Title: Island Lowpoly
*/

import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import {a} from '@react-spring/three'
import islandScene from '../assets/3d/island_lowpoly.glb'

const Island = ({isRotating, setIsRotating , setCurrentStage, currentFocusPoint, ...props}) =>{
  
  
  const islandRef = useRef()

  const{gl, viewport} = useThree();
  const lastX = useRef(0);
  const rotationSpeed = useRef(0)
  const dampingFactor = 0.95
  const { nodes, materials } = useGLTF(islandScene)

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
    

    const clientX = e.touches ? e.touches[0].clientX : e.clientX  
    lastX.current = clientX
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  } 

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating){
      const clientX = e.touches ? e.touches[0].clientX: e.clientX  


    const delta =  (clientX - lastX.current)/viewport.width;
    islandRef.current.rotation.z += delta * 0.01 *Math.PI
    lastX.current = clientX;
    rotationSpeed.current = delta * 0.01 * Math.PI
    }
   
  } 


  const handleKeyDown = (e) =>{
    if(e.key === 'ArrowLeft'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.z += 0.01 * Math.PI
    } else if(e.key === 'ArrowRight'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.z -= 0.01 * Math.PI
    }
  }

  const handleKeyUp = (e)=>{
    if(e.key === 'ArrowLeft' || e.key === 'ArrowRight'){
      setIsRotating(false);
    }
  }


  useFrame(() =>{
    if(!isRotating){
      rotationSpeed.current *= dampingFactor;

      if(Math.abs(rotationSpeed.current) < 0.001){
        rotationSpeed.current = 0;
      }
      islandRef.current.rotation.z += rotationSpeed.current
    } else {
      const rotation = islandRef.current.rotation.z;
      const normalizedRotation =((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  })

  useEffect(()=>{
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown )
    canvas.addEventListener("pointerup", handlePointerUp)
    canvas.addEventListener("pointermove",handlePointerMove)
    document.addEventListener("keydown",handleKeyDown)
    document.addEventListener("keyup",handleKeyUp)
    


    return () =>{
      canvas.removeEventListener('pointerdown', handlePointerDown)
      canvas.removeEventListener('pointerup', handlePointerUp)
      canvas.removeEventListener('pointermove', handlePointerMove)
      document.removeEventListener('keydown', handleKeyDown)
      document.removeEventListener('keyup', handleKeyUp)
    }

  },[gl,handlePointerDown,handlePointerUp,handlePointerMove])


  
  return (
    <a.group ref = {islandRef}{...props} dispose={null}>
      <group >
        <group position={[-0.046, -0.003, 2.175]} scale={2} >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_0.geometry}
            material={materials.Clay}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_1.geometry}
            material={materials.Lava}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_2.geometry}
            material={materials.Water}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_3.geometry}
            material={materials.Tree}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_4.geometry}
            material={materials.Rocks}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_5.geometry}
            material={materials.Dark_Clay}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_6.geometry}
            material={materials.Snow}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Island_BaseMountain_7.geometry}
            material={materials.White}
          />
        </group>
        <group position={[1.741, -0.741, 4.021]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Rocks_0.geometry}
            material={materials['Rocks.002']}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Rocks_1.geometry}
            material={materials.DarkRocks}
          />
        </group>
        <group position={[-1.493, 1.71, 4.168]} scale={[0.119, 0.154, 0.139]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Forest_0.geometry}
            material={materials.Wall}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Forest_1.geometry}
            material={materials.Leaves}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Forest_2.geometry}
            material={materials.Trunk}
          />
        </group>
        <group position={[-0.046, -0.003, 2.175]} scale={2}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Lava_0.geometry}
            material={materials.Clay}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Lava_1.geometry}
            material={materials.Lava}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cloud_0.geometry}
          material={materials['White.001']}
          position={[-0.046, -0.003, 2.175]}
          scale={2}
        />
      </group>
      
    </a.group>
  )
}

export default Island